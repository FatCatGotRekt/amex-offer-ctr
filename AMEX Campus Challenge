{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12380421,"sourceType":"datasetVersion","datasetId":7806450}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\ntrain_df = pd.read_parquet('/kaggle/input/amex-campus-challenge-2025/train_data.parquet')\n\ntrain_df.head()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-15T00:39:24.159570Z","iopub.execute_input":"2025-09-15T00:39:24.160003Z","iopub.status.idle":"2025-09-15T00:39:36.872872Z","shell.execute_reply.started":"2025-09-15T00:39:24.159975Z","shell.execute_reply":"2025-09-15T00:39:36.871716Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"                                               id1      id2        id3  \\\n0  1366776_189706075_16-23_2023-11-02 22:22:00.042  1366776  189706075   \n1      1366776_89227_16-23_2023-11-01 23:51:24.999  1366776      89227   \n2      1366776_35046_16-23_2023-11-01 00:30:59.797  1366776      35046   \n3    1366776_6275451_16-23_2023-11-02 22:21:32.261  1366776    6275451   \n4      1366776_78053_16-23_2023-11-02 22:21:34.799  1366776      78053   \n\n                       id4         id5  y   f1    f2    f3    f4  ...  f357  \\\n0  2023-11-02 22:22:00.042  2023-11-02  0  1.0  None  None  None  ...  None   \n1  2023-11-01 23:51:24.999  2023-11-01  0  1.0  None  None  None  ...  None   \n2  2023-11-01 00:30:59.797  2023-11-01  0  1.0  None  None  None  ...  None   \n3  2023-11-02 22:21:32.261  2023-11-02  0  1.0  None  None  None  ...  None   \n4  2023-11-02 22:21:34.799  2023-11-02  0  1.0  None  None  None  ...  None   \n\n      f358 f359  f360   f361 f362               f363    f364 f365  \\\n0  -9999.0  0.0  None   28.0  0.0                0.0   337.0  0.0   \n1     None  0.0  None   87.0  0.0                0.0  1010.0  2.0   \n2     None  0.0  None   23.0  0.0                0.0  1010.0  2.0   \n3  -9999.0  0.0  None  277.0  1.0  0.003610108303249   337.0  0.0   \n4  -9999.0  0.0  None  359.0  0.0                0.0   337.0  0.0   \n\n                 f366  \n0                 0.0  \n1  0.0019801980198019  \n2  0.0019801980198019  \n3                 0.0  \n4                 0.0  \n\n[5 rows x 372 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id1</th>\n      <th>id2</th>\n      <th>id3</th>\n      <th>id4</th>\n      <th>id5</th>\n      <th>y</th>\n      <th>f1</th>\n      <th>f2</th>\n      <th>f3</th>\n      <th>f4</th>\n      <th>...</th>\n      <th>f357</th>\n      <th>f358</th>\n      <th>f359</th>\n      <th>f360</th>\n      <th>f361</th>\n      <th>f362</th>\n      <th>f363</th>\n      <th>f364</th>\n      <th>f365</th>\n      <th>f366</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1366776_189706075_16-23_2023-11-02 22:22:00.042</td>\n      <td>1366776</td>\n      <td>189706075</td>\n      <td>2023-11-02 22:22:00.042</td>\n      <td>2023-11-02</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>...</td>\n      <td>None</td>\n      <td>-9999.0</td>\n      <td>0.0</td>\n      <td>None</td>\n      <td>28.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>337.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1366776_89227_16-23_2023-11-01 23:51:24.999</td>\n      <td>1366776</td>\n      <td>89227</td>\n      <td>2023-11-01 23:51:24.999</td>\n      <td>2023-11-01</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0.0</td>\n      <td>None</td>\n      <td>87.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1010.0</td>\n      <td>2.0</td>\n      <td>0.0019801980198019</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1366776_35046_16-23_2023-11-01 00:30:59.797</td>\n      <td>1366776</td>\n      <td>35046</td>\n      <td>2023-11-01 00:30:59.797</td>\n      <td>2023-11-01</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0.0</td>\n      <td>None</td>\n      <td>23.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1010.0</td>\n      <td>2.0</td>\n      <td>0.0019801980198019</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1366776_6275451_16-23_2023-11-02 22:21:32.261</td>\n      <td>1366776</td>\n      <td>6275451</td>\n      <td>2023-11-02 22:21:32.261</td>\n      <td>2023-11-02</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>...</td>\n      <td>None</td>\n      <td>-9999.0</td>\n      <td>0.0</td>\n      <td>None</td>\n      <td>277.0</td>\n      <td>1.0</td>\n      <td>0.003610108303249</td>\n      <td>337.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1366776_78053_16-23_2023-11-02 22:21:34.799</td>\n      <td>1366776</td>\n      <td>78053</td>\n      <td>2023-11-02 22:21:34.799</td>\n      <td>2023-11-02</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>...</td>\n      <td>None</td>\n      <td>-9999.0</td>\n      <td>0.0</td>\n      <td>None</td>\n      <td>359.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>337.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 372 columns</p>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"train_df['y'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T00:49:39.918768Z","iopub.execute_input":"2025-09-15T00:49:39.919665Z","iopub.status.idle":"2025-09-15T00:49:39.969577Z","shell.execute_reply.started":"2025-09-15T00:49:39.919632Z","shell.execute_reply":"2025-09-15T00:49:39.968230Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"y\n0    733113\n1     37051\nName: count, dtype: int64"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"import pandas as pd\nimport lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score, log_loss \n\n\ncustomer_id_col = 'id2'\noffer_id_col = 'id3'\ntarget_col = 'y'\n\nfor col in train_df.columns:\n    if col not in [customer_id_col, offer_id_col, target_col]:\n        train_df[col] = pd.to_numeric(train_df[col], errors='coerce')\n\ntrain_df.fillna(-1, inplace=True)\n\nfeatures = [col for col in train_df.columns if col not in [customer_id_col, offer_id_col, target_col]]\nX = train_df[features]\ny = train_df[target_col]\n\n\nclass_counts = y.value_counts()\nscale_pos_weight = class_counts[0] / class_counts[1]\nprint(f\"Scale Pos Weight (for imbalanced data): {scale_pos_weight:.2f}\")\n\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\nprint(f\"Training data shape: {X_train.shape}\")\nprint(f\"Validation data shape: {X_val.shape}\")\n\n# --- 5. Train the LightGBM Model ---\nlgb_clf = lgb.LGBMClassifier(objective='lambdarank',\n                             metric='logloss',\n                             n_estimators=1000,\n                             learning_rate=0.05,\n                             num_leaves=31,\n                             max_depth=-1,\n                             seed=42,\n                             n_jobs=-1,\n                             verbose=-1,\n                             scale_pos_weight=scale_pos_weight)\n\nprint(\"\\nTraining LightGBM model...\")\nlgb_clf.fit(X_train, y_train,\n            eval_set=[(X_val, y_val)],\n            eval_metric='logloss',\n            callbacks=[lgb.early_stopping(100)])\n\n# --- 6. Predict and Evaluate using AUC & Log Loss ---\nprint(\"Making predictions on the validation set...\")\n# We need probabilities of the positive class (click=1)\nval_preds_proba = lgb_clf.predict_proba(X_val)[:, 1]\n\n# Calculate the scores\nauc_score = roc_auc_score(y_val, val_preds_proba)\nlogloss_score = log_loss(y_val, val_preds_proba)\n\nprint(f\"\\nBaseline AUC Score on Validation Set: {auc_score:.4f}\")\nprint(f\"Baseline Log Loss on Validation Set: {logloss_score:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-15T01:05:31.142164Z","iopub.execute_input":"2025-09-15T01:05:31.143891Z","iopub.status.idle":"2025-09-15T01:05:49.465897Z","shell.execute_reply.started":"2025-09-15T01:05:31.143845Z","shell.execute_reply":"2025-09-15T01:05:49.464503Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/824586670.py:23: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  scale_pos_weight = class_counts[0] / class_counts[1]\n","output_type":"stream"},{"name":"stdout","text":"Scale Pos Weight (for imbalanced data): 19.79\nTraining data shape: (616131, 369)\nValidation data shape: (154033, 369)\n\nTraining LightGBM model...\n","output_type":"stream"},{"name":"stderr","text":"[LightGBM] [Fatal] Ranking tasks require query information\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mLightGBMError\u001b[0m                             Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/824586670.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nTraining LightGBM model...\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m lgb_clf.fit(X_train, y_train,\n\u001b[0m\u001b[1;32m     45\u001b[0m             \u001b[0meval_set\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m             \u001b[0meval_metric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'logloss'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/lightgbm/sklearn.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, init_score, eval_set, eval_names, eval_sample_weight, eval_class_weight, eval_init_score, eval_metric, feature_name, categorical_feature, callbacks, init_model)\u001b[0m\n\u001b[1;32m   1282\u001b[0m                     \u001b[0mvalid_sets\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalid_x\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_le\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalid_y\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1283\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1284\u001b[0;31m         super().fit(\n\u001b[0m\u001b[1;32m   1285\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1286\u001b[0m             \u001b[0m_y\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/lightgbm/sklearn.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, init_score, group, eval_set, eval_names, eval_sample_weight, eval_class_weight, eval_init_score, eval_group, eval_metric, feature_name, categorical_feature, callbacks, init_model)\u001b[0m\n\u001b[1;32m    953\u001b[0m         \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecord_evaluation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevals_result\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    954\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 955\u001b[0;31m         self._Booster = train(\n\u001b[0m\u001b[1;32m    956\u001b[0m             \u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    957\u001b[0m             \u001b[0mtrain_set\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_set\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/lightgbm/engine.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(params, train_set, num_boost_round, valid_sets, valid_names, feval, init_model, feature_name, categorical_feature, keep_training_booster, callbacks)\u001b[0m\n\u001b[1;32m    280\u001b[0m     \u001b[0;31m# construct booster\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    281\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 282\u001b[0;31m         \u001b[0mbooster\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBooster\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_set\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_set\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    283\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_valid_contain_train\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    284\u001b[0m             \u001b[0mbooster\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_train_data_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_data_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, params, train_set, model_file, model_str)\u001b[0m\n\u001b[1;32m   3639\u001b[0m             \u001b[0mparams\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_set\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3640\u001b[0m             \u001b[0mparams_str\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_param_dict_to_str\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3641\u001b[0;31m             _safe_call(\n\u001b[0m\u001b[1;32m   3642\u001b[0m                 _LIB.LGBM_BoosterCreate(\n\u001b[1;32m   3643\u001b[0m                     \u001b[0mtrain_set\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/lightgbm/basic.py\u001b[0m in \u001b[0;36m_safe_call\u001b[0;34m(ret)\u001b[0m\n\u001b[1;32m    294\u001b[0m     \"\"\"\n\u001b[1;32m    295\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mret\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mLightGBMError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_LIB\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLGBM_GetLastError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"utf-8\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mLightGBMError\u001b[0m: Ranking tasks require query information"],"ename":"LightGBMError","evalue":"Ranking tasks require query information","output_type":"error"}],"execution_count":13}]}